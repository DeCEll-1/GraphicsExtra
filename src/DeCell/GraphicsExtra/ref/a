package DeCell.GraphicsExtra.Render.ModernOpengl;


import DeCell.GraphicsExtra.Render.RenderMisc;
import com.fs.starfarer.campaign.WarpingSpriteRenderer;
import org.lwjgl.BufferUtils;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import java.nio.FloatBuffer;
import java.util.List;

import static org.lwjgl.opengl.GL30.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL15.*;
import static org.lwjgl.opengl.GL20.*;

import static org.lwjgl.opengl.ARBVertexArrayObject.glGenVertexArrays;

public class VertexObjects {
    private int vertexArrayID = 0;
    public VertexObjects init() {
        this.vertexArrayID = glGenVertexArrays();
        glBindVertexArray(vertexArrayID);
        glBindVertexArray(0);
        return this;
    }
    public VertexObjects AddVertexAttribute2f(int pointer, List<Vector2f> vectors) {
        glBindVertexArray(vertexArrayID); // bind the array so were working on it

        float[] vectorArrays = Vector2fToArray(vectors);

        int vectorBufferID = glGenBuffers(); // generate a buffer id
        glBindBuffer(GL_ARRAY_BUFFER, vectorBufferID); // bind our buffer
        FloatBuffer vectorBuffer = BufferUtils.createFloatBuffer(vectorArrays.length); // make float buffer to add our values into
        vectorBuffer.put(vectorArrays).flip(); // flip it cuz idk
        glBufferData(GL_ARRAY_BUFFER, vectorBuffer, GL_STATIC_DRAW); // input the data
        glVertexAttribPointer(pointer, 4, GL_FLOAT, false, 0, 0); // set the
        glEnableVertexAttribArray(pointer);

        glBindVertexArray(0); // unbind

        return this;
    }
    public VertexObjects AddVertexAttribute3f(int pointer, List<Vector3f> vectors) {
        glBindVertexArray(vertexArrayID); // bind the array so were working on it

        float[] vector3fArray = Vector3fToArray(vectors);

        int vector3fBufferID = glGenBuffers(); // generate a buffer id
        glBindBuffer(GL_ARRAY_BUFFER, vector3fBufferID); // bind our buffer
        FloatBuffer vector3fBuffer = BufferUtils.createFloatBuffer(vector3fArray.length); // make float buffer to add our values into
        vector3fBuffer.put(vector3fArray).flip(); // flip it cuz idk
        glBufferData(GL_ARRAY_BUFFER, vector3fBuffer, GL_STATIC_DRAW); // input the data
        glVertexAttribPointer(pointer, 4, GL_FLOAT, false, 0, 0); // set the
        glEnableVertexAttribArray(pointer);

        glBindVertexArray(0); // unbind

        return this;
    }
    public VertexObjects AddVertexAttribute4f(int pointer, List<Vector4f> vectors) {
        glBindVertexArray(vertexArrayID); // bind the array so were working on it

        float[] colorsArray = Vector4fToArray(vectors);

        int colorBufferId = glGenBuffers(); // generate a buffer id
        glBindBuffer(GL_ARRAY_BUFFER, colorBufferId); // bind our buffer
        FloatBuffer colorBuffer = BufferUtils.createFloatBuffer(colorsArray.length); // make float buffer to add our values into
        colorBuffer.put(colorsArray).flip(); // flip it cuz idk
        glBufferData(GL_ARRAY_BUFFER, colorBuffer, GL_STATIC_DRAW); // input the data
        glVertexAttribPointer(pointer, 4, GL_FLOAT, false, 0, 0); // set the
        glEnableVertexAttribArray(pointer);

        glBindVertexArray(0); // unbind

        return this;
    }
    private float[] Vector2fToArray(List<Vector2f> vertexes) {
        float[] result = new float[vertexes.size() * 2];

        for (int i = 0; i < vertexes.size() * 2; i += 2) {
            result[i] = vertexes.get(i / 2).getX();
            result[i + 1] = vertexes.get(i / 2).getY();
        }

        return result;
    }
    private float[] Vector3fToArray(List<Vector3f> vertexes) {
        float[] result = new float[vertexes.size() * 3];

        for (int i = 0; i < vertexes.size() * 3; i += 3) {
            result[i] = vertexes.get(i / 3).getX();
            result[i + 1] = vertexes.get(i / 3).getY();
            result[i + 2] = vertexes.get(i / 3).getZ();
        }

        return result;
    }
    private float[] Vector4fToArray(List<Vector4f> vertexes) {
        float[] result = new float[vertexes.size() * 4];

        for (int i = 0; i < vertexes.size() * 4; i += 4) {
            result[i] = vertexes.get(i / 4).getX();
            result[i + 1] = vertexes.get(i / 4).getY();
            result[i + 2] = vertexes.get(i / 4).getZ();
            result[i + 3] = vertexes.get(i / 4).getW();
        }

        return result;
    }
    public void bind() {
        glBindVertexArray(vertexArrayID);
    }
    public void unbind() {
        glBindVertexArray(0);
    }
    public void dispose() { // why not
        glDeleteVertexArrays(vertexArrayID);
    }


}
